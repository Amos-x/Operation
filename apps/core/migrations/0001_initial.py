# Generated by Django 2.0.7 on 2018-08-28 01:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=128, verbose_name='email address')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='用户名')),
                ('full_name', models.CharField(max_length=10, verbose_name='真实姓名')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('department', models.CharField(blank=True, max_length=32, null=True, verbose_name='部门')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='手机')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateField(auto_now_add=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': ('用户信息',),
                'verbose_name_plural': '用户信息',
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_type', models.CharField(choices=[('server', '服务器'), ('networkdevice', '网络设备'), ('storagedevice', '储存设备'), ('securitydevice', '安全设备'), ('software', '软件资产'), ('others', '其他类')], default='server', max_length=64)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='名称')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='资产SN号')),
                ('trade_date', models.DateField(blank=True, null=True, verbose_name='购买时间')),
                ('price', models.FloatField(blank=True, null=True, verbose_name='价格')),
                ('expire_date', models.FloatField(blank=True, null=True, verbose_name='过保修期')),
                ('status', models.CharField(choices=[('online', '在线'), ('offline', '已下线'), ('unknown', '未知'), ('breakdown', '故障'), ('backup', '备用')], default='online', max_length=20)),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='资产管理员')),
            ],
            options={
                'verbose_name': '资产总表',
                'verbose_name_plural': '资产总表',
            },
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board_model', models.CharField(blank=True, max_length=64, null=True)),
                ('board_sn', models.CharField(blank=True, max_length=128, null=True)),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Asset')),
            ],
            options={
                'verbose_name': '主板',
                'verbose_name_plural': '主板',
            },
        ),
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='业务线')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('parent_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_level', to='core.BusinessUnit')),
            ],
            options={
                'verbose_name': '业务线',
                'verbose_name_plural': '业务线',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_num', models.CharField(max_length=128, unique=True, verbose_name='合同编号')),
                ('name', models.CharField(max_length=64, verbose_name='合同名称')),
                ('price', models.IntegerField(blank=True, null=True, verbose_name='合同金额')),
                ('detail', models.TextField(blank=True, null=True, verbose_name='合同详情')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '合同',
                'verbose_name_plural': '合同',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_arch', models.CharField(blank=True, max_length=50, null=True, verbose_name='CPU架构')),
                ('cpu_model', models.CharField(blank=True, max_length=100, verbose_name='CPU型号')),
                ('cpu_physical_num', models.SmallIntegerField(blank=True, null=True, verbose_name='物理CPU个数')),
                ('cpu_core_count', models.SmallIntegerField(verbose_name='CPU核数')),
                ('cpu_flags', models.TextField(verbose_name='CPU支持的功能')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Asset')),
            ],
            options={
                'verbose_name': 'CPU部件',
                'verbose_name_plural': 'CPU部件',
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN号')),
                ('slot', models.CharField(blank=True, max_length=64, null=True, verbose_name='插槽')),
                ('factory', models.CharField(blank=True, max_length=64, null=True, verbose_name='制造商')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='磁盘型号')),
                ('capacity', models.FloatField(verbose_name='磁盘容量GB')),
                ('iface_type', models.CharField(choices=[('SATA', 'SATA'), ('SAS', 'SAS'), ('SCSI', 'SCSI'), ('SSD', 'SSD')], default='SAS', max_length=20, verbose_name='接口类型')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Asset')),
            ],
            options={
                'verbose_name': '硬盘',
                'verbose_name_plural': '硬盘',
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='事件名称')),
                ('event_type', models.CharField(choices=[('硬件变更', '硬件变更'), ('新增配件', '新增配件'), ('设备上线', '设备上线'), ('设备下线', '设备下线'), ('定期维护', '定期维护'), ('业务上线/变更', '业务上线/变更'), ('其他', '其他')], max_length=20, verbose_name='事件类型')),
                ('detail', models.TextField(verbose_name='事件详情')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='事件时间')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('asset', models.ManyToManyField(null=True, to='core.Asset')),
                ('handler', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='事件负责人')),
            ],
            options={
                'verbose_name': '事件记录',
                'verbose_name_plural': '事件记录',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='机房名称')),
                ('address', models.CharField(max_length=128, verbose_name='机房地址')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '机房',
                'verbose_name_plural': '机房',
            },
        ),
        migrations.CreateModel(
            name='Manufactory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufactory', models.CharField(max_length=64, unique=True, verbose_name='厂商名称')),
                ('support_person', models.CharField(blank=True, max_length=10, null=True, verbose_name='联系人')),
                ('support_num', models.CharField(blank=True, max_length=30, null=True, verbose_name='支持电话')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '厂商',
                'verbose_name_plural': '厂商',
            },
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.CharField(choices=[('router', '路由器'), ('switch', '交换机'), ('NLB', '负载均衡'), ('VPN', 'VPN设备'), ('wireless-AP', '无线AP')], default='router', max_length=20, verbose_name='网络设备类型')),
                ('vlan_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='VlanIP')),
                ('manage_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='内网IP')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='型号')),
                ('device_detail', models.TextField(blank=True, null=True, verbose_name='设备详细参数')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Asset')),
                ('factory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory')),
            ],
            options={
                'verbose_name': '网络设备',
                'verbose_name_plural': '网络设备',
            },
        ),
        migrations.CreateModel(
            name='NewAssetApprovalZone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='名称')),
                ('sn', models.CharField(max_length=128, verbose_name='资产SN号')),
                ('asset_type', models.CharField(blank=True, choices=[('server', '服务器'), ('networkdevice', '网络设备'), ('storagedevice', '储存设备'), ('securitydevice', '安全设备'), ('software', '软件资产'), ('others', '其他类')], max_length=64, null=True)),
                ('data', models.TextField(verbose_name='资产数据')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='汇报日期')),
                ('approved', models.BooleanField(default=False, verbose_name='已批准')),
                ('approved_date', models.DateTimeField(blank=True, null=True, verbose_name='批准日期')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='批准人')),
                ('bussiness_unit', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.BusinessUnit')),
                ('contract', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Contract')),
                ('idc', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.IDC')),
            ],
            options={
                'verbose_name': '新上线待批准资产',
                'verbose_name_plural': '新上线待批准资产',
            },
        ),
        migrations.CreateModel(
            name='NIC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True, verbose_name='网卡名')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='网卡型号')),
                ('mac_addr', models.CharField(max_length=64, unique=True, verbose_name='MAC地址')),
                ('ip_addr', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP')),
                ('netmask', models.CharField(blank=True, max_length=64, null=True)),
                ('broadcast', models.CharField(blank=True, max_length=64, null=True)),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Asset')),
            ],
            options={
                'verbose_name': '网卡',
                'verbose_name_plural': '网卡',
            },
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN号')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='内存型号')),
                ('slot', models.CharField(max_length=64, verbose_name='插槽')),
                ('speed', models.CharField(blank=True, max_length=30, null=True, verbose_name='速度')),
                ('capacity', models.IntegerField(verbose_name='内存大小（MB）')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Asset')),
                ('ram_factory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory')),
            ],
            options={
                'verbose_name': 'RAM',
                'verbose_name_plural': 'RAM',
            },
        ),
        migrations.CreateModel(
            name='SecurityDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.CharField(choices=[('防火墙', '防火墙'), ('入侵检测设备', '入侵检测设备'), ('互联网网关', '互联网网关'), ('其它安全设备', '其它安全设备')], max_length=20)),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='型号')),
                ('manage_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='内网管理IP')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Asset')),
                ('factory', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory')),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.CharField(choices=[('Rack', '机架式服务器'), ('Tower', '塔式服务器'), ('Blade', '刀片式服务器'), ('PC', 'PC型小服务器'), ('Vps', '虚拟服务器')], default='Rack', max_length=20, verbose_name='服务器类型')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='型号')),
                ('os_type', models.CharField(blank=True, max_length=64, null=True, verbose_name='操作系统类型')),
                ('os_release', models.CharField(blank=True, max_length=64, null=True, verbose_name='操作系统版本')),
                ('kernel_release', models.CharField(blank=True, max_length=64, null=True, verbose_name='内核版本')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Asset')),
                ('hosted_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='hosted_on_server', to='core.Server')),
                ('server_factory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory')),
            ],
            options={
                'verbose_name': '服务器',
                'verbose_name_plural': '服务器',
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_asset_type', models.CharField(choices=[('System', '系统'), ('Software', '软件')], default='Software', max_length=20, verbose_name='软件资产类型')),
                ('version', models.CharField(max_length=100, verbose_name='系统/软件版本')),
                ('license_num', models.IntegerField(verbose_name='授权数')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.Asset')),
                ('factory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory')),
            ],
            options={
                'verbose_name': '系统/软件',
                'verbose_name_plural': '系统/软件',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Tag_Name')),
                ('create_date', models.DateField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='newassetapprovalzone',
            name='tags',
            field=models.ManyToManyField(to='core.Tag'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='cpu_factory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory'),
        ),
        migrations.AddField(
            model_name='contract',
            name='contract_factory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory'),
        ),
        migrations.AddField(
            model_name='board',
            name='board_factory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Manufactory'),
        ),
        migrations.AddField(
            model_name='asset',
            name='bussiness_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.BusinessUnit', verbose_name='所属业务线'),
        ),
        migrations.AddField(
            model_name='asset',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Contract', verbose_name='合同'),
        ),
        migrations.AddField(
            model_name='asset',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.IDC', verbose_name='IDC机房'),
        ),
        migrations.AddField(
            model_name='asset',
            name='tags',
            field=models.ManyToManyField(blank=True, null=True, to='core.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='ram',
            unique_together={('asset', 'slot')},
        ),
        migrations.AlterUniqueTogether(
            name='nic',
            unique_together={('asset', 'mac_addr')},
        ),
        migrations.AlterUniqueTogether(
            name='disk',
            unique_together={('asset', 'slot')},
        ),
        migrations.AlterUniqueTogether(
            name='asset',
            unique_together={('name', 'sn')},
        ),
    ]
